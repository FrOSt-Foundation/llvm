From f33d056b945ac3b6f7f97875af2af791f369c7af Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Mikael=20Holm=C3=A9n?= <mikael.holmen@ericsson.com>
Date: Mon, 16 Feb 2015 12:26:27 +0100
Subject: [PATCH 4/7] Change Tablegen to emit RegSize and Alignment in
 MCRegisterClass in bits, instead of bytes.

MCRegisterClass::getSize and getAlignment are renamed by adding the
InBits prefix.
---
 include/llvm/MC/MCRegisterInfo.h         | 14 +++++++-------
 include/llvm/Target/Target.td            |  5 ++---
 include/llvm/Target/TargetRegisterInfo.h |  4 ++--
 utils/TableGen/RegisterInfoEmitter.cpp   |  8 ++++----
 4 files changed, 15 insertions(+), 16 deletions(-)

diff --git a/include/llvm/MC/MCRegisterInfo.h b/include/llvm/MC/MCRegisterInfo.h
index 3dc88a2..2a4c2c4 100644
--- a/include/llvm/MC/MCRegisterInfo.h
+++ b/include/llvm/MC/MCRegisterInfo.h
@@ -39,7 +39,7 @@ public:
   const uint16_t RegsSize;
   const uint16_t RegSetSize;
   const uint16_t ID;
-  const uint16_t RegSize, Alignment; // Size & Alignment of register in bytes
+  const uint16_t RegSize, Alignment; // Size & Alignment of register in bits
   const int8_t CopyCost;
   const bool Allocatable;
 
@@ -78,13 +78,13 @@ public:
     return contains(Reg1) && contains(Reg2);
   }
 
-  /// getSize - Return the size of the register in bytes, which is also the size
-  /// of a stack slot allocated to hold a spilled copy of this register.
-  unsigned getSize() const { return RegSize; }
+  /// getSizeInBits - Return the size of the register in bits, which is also the
+  /// size of a stack slot allocated to hold a spilled copy of this register.
+  unsigned getSizeInBits() const { return RegSize; }
 
-  /// getAlignment - Return the minimum required alignment for a register of
-  /// this class.
-  unsigned getAlignment() const { return Alignment; }
+  /// getAlignmentInBits - Return the minimum required alignment in bits for a
+  /// register of this class.
+  unsigned getAlignmentInBits() const { return Alignment; }
 
   /// getCopyCost - Return the cost of copying a value between two registers in
   /// this class. A negative number means the register class is very expensive
diff --git a/include/llvm/Target/Target.td b/include/llvm/Target/Target.td
index 729d766..7bb3466 100644
--- a/include/llvm/Target/Target.td
+++ b/include/llvm/Target/Target.td
@@ -168,9 +168,8 @@ class RegisterClass<string namespace, list<ValueType> regTypes, int alignment,
   // zero lets tablgen pick an appropriate size.
   int Size = 0;
 
-  // Alignment - Specify the alignment required of the registers when they are
-  // stored or loaded to memory.
-  //
+  // Alignment - Specify the alignment in bits required of the registers when
+  // they are stored or loaded to memory.
   int Alignment = alignment;
 
   // CopyCost - This value is used to specify the cost of copying a value
diff --git a/include/llvm/Target/TargetRegisterInfo.h b/include/llvm/Target/TargetRegisterInfo.h
index 3080e9a..67c2a67f 100644
--- a/include/llvm/Target/TargetRegisterInfo.h
+++ b/include/llvm/Target/TargetRegisterInfo.h
@@ -94,10 +94,10 @@ public:
 
   /// Return the size of the register in bytes, which is also the size
   /// of a stack slot allocated to hold a spilled copy of this register.
-  unsigned getSize() const { return MC->getSize(); }
+  unsigned getSize() const { return MC->getSizeInBits() / 8; }
 
   /// Return the minimum required alignment for a register of this class.
-  unsigned getAlignment() const { return MC->getAlignment(); }
+  unsigned getAlignment() const { return MC->getAlignmentInBits() / 8; }
 
   /// Return the cost of copying a value between two registers in this class.
   /// A negative number means the register class is very expensive
diff --git a/utils/TableGen/RegisterInfoEmitter.cpp b/utils/TableGen/RegisterInfoEmitter.cpp
index b75be13..1be13d9 100644
--- a/utils/TableGen/RegisterInfoEmitter.cpp
+++ b/utils/TableGen/RegisterInfoEmitter.cpp
@@ -1025,16 +1025,16 @@ RegisterInfoEmitter::runMCDesc(raw_ostream &OS, CodeGenTarget &Target,
   for (const auto &RC : RegisterClasses) {
     // Asserts to make sure values will fit in table assuming types from
     // MCRegisterInfo.h
-    assert((RC.SpillSize/8) <= 0xffff && "SpillSize too large.");
-    assert((RC.SpillAlignment/8) <= 0xffff && "SpillAlignment too large.");
+    assert((RC.SpillSize) <= 0xffff && "SpillSize too large.");
+    assert((RC.SpillAlignment) <= 0xffff && "SpillAlignment too large.");
     assert(RC.CopyCost >= -128 && RC.CopyCost <= 127 && "Copy cost too large.");
 
     OS << "  { " << RC.getName() << ", " << RC.getName() << "Bits, "
        << RegClassStrings.get(RC.getName()) << ", "
        << RC.getOrder().size() << ", sizeof(" << RC.getName() << "Bits), "
        << RC.getQualifiedName() + "RegClassID" << ", "
-       << RC.SpillSize/8 << ", "
-       << RC.SpillAlignment/8 << ", "
+       << RC.SpillSize << ", "
+       << RC.SpillAlignment << ", "
        << RC.CopyCost << ", "
        << ( RC.Allocatable ? "true" : "false" ) << " },\n";
   }
-- 
2.9.3

